# OceanProxy Nginx Configuration - COMPLETE STRUCTURAL IMPLEMENTATION
# This configuration provides proper HTTP API access and Stream proxy load balancing

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

# Events block - optimized for high concurrency
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 65536;
}

# HTTP block for API management and health checks
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging formats
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format api  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic HTTP settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer settings for performance
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=100r/s;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Default server for API and management
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Health check endpoint (high frequency, minimal logging)
        location = /health {
            limit_req zone=health burst=50 nodelay;
            access_log off;
            
            proxy_pass http://127.0.0.1:8080/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Fast timeouts for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Readiness check endpoint
        location = /ready {
            limit_req zone=health burst=20 nodelay;
            access_log off;
            
            proxy_pass http://127.0.0.1:8080/ready;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Detailed logging for API calls
            access_log /var/log/nginx/api.log api;
        }

        # Legacy endpoints for backward compatibility
        location ~ ^/(plan|nettify)/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            access_log /var/log/nginx/legacy.log api;
        }

        # API documentation (if available)
        location /docs {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Metrics endpoint (if enabled)
        location /metrics {
            # Restrict access to localhost only
            allow 127.0.0.1;
            deny all;
            
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
        }

        # Default response for undefined locations
        location / {
            return 200 '{"service":"OceanProxy","status":"running","version":"1.0.0"}\n';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 404 /404.json;
        location = /404.json {
            return 404 '{"error":"Not Found","code":404}\n';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            return 500 '{"error":"Internal Server Error","code":500}\n';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (uncomment and configure when SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name oceanproxy.io *.oceanproxy.io;
    # 
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    # 
    #     # Same locations as HTTP server...
    # }
}

# Stream block for proxy load balancing - THIS IS THE CORE FUNCTIONALITY
stream {
    # Stream logging format
    log_format proxy_stream '$remote_addr [$time_local] $protocol $status '
                           '$bytes_sent $bytes_received $session_time '
                           '"$upstream_addr" "$upstream_bytes_sent" "$upstream_bytes_received"';

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=proxy_conn:10m;

    # USA region proxy load balancer (port 1337)
    upstream oceanproxy_usa_residential {
        least_conn;
        # Dynamic servers will be added by OceanProxy application
        # Example entries that will be added:
        # server 127.0.0.1:10001 weight=1 max_fails=3 fail_timeout=30s;
        # server 127.0.0.1:10002 weight=1 max_fails=3 fail_timeout=30s;
        
        # Backup server for when no instances are available
        server 127.0.0.1:10001 backup down;
    }

    upstream oceanproxy_usa_datacenter {
        least_conn;
        # Dynamic servers for datacenter proxies
        server 127.0.0.1:12001 backup down;
    }

    upstream oceanproxy_usa_isp {
        least_conn;
        # Dynamic servers for ISP proxies
        server 127.0.0.1:14001 backup down;
    }

    # EU region proxy load balancers (port 1338)
    upstream oceanproxy_eu_residential {
        least_conn;
        server 127.0.0.1:16001 backup down;
    }

    upstream oceanproxy_eu_datacenter {
        least_conn;
        server 127.0.0.1:18001 backup down;
    }

    upstream oceanproxy_eu_isp {
        least_conn;
        server 127.0.0.1:20001 backup down;
    }

    # Alpha region proxy load balancers (port 9876)
    upstream oceanproxy_alpha_residential {
        least_conn;
        server 127.0.0.1:22001 backup down;
    }

    upstream oceanproxy_alpha_datacenter {
        least_conn;
        server 127.0.0.1:24001 backup down;
    }

    upstream oceanproxy_alpha_mobile {
        least_conn;
        server 127.0.0.1:26001 backup down;
    }

    upstream oceanproxy_alpha_unlimited {
        least_conn;
        server 127.0.0.1:28001 backup down;
    }

    # Map to determine upstream based on some logic (simplified version)
    # In practice, OceanProxy will manage this dynamically
    map $remote_addr $usa_upstream {
        default oceanproxy_usa_residential;
        # Could add IP-based routing here if needed
    }

    # USA region server (port 1337)
    server {
        listen 1337;
        proxy_pass $usa_upstream;
        proxy_timeout 60s;
        proxy_responses 1;
        proxy_next_upstream on;
        proxy_next_upstream_timeout 60s;
        proxy_next_upstream_tries 3;
        
        # Connection limiting (per IP)
        limit_conn proxy_conn 100;
        
        # Logging
        access_log /var/log/nginx/usa_proxy.log proxy_stream;
        error_log /var/log/nginx/usa_proxy_error.log;
    }

    # EU region server (port 1338)
    server {
        listen 1338;
        proxy_pass oceanproxy_eu_residential;  # Default to residential
        proxy_timeout 60s;
        proxy_responses 1;
        proxy_next_upstream on;
        proxy_next_upstream_timeout 60s;
        proxy_next_upstream_tries 3;
        
        limit_conn proxy_conn 100;
        
        access_log /var/log/nginx/eu_proxy.log proxy_stream;
        error_log /var/log/nginx/eu_proxy_error.log;
    }

    # Alpha region server (port 9876)
    server {
        listen 9876;
        proxy_pass oceanproxy_alpha_residential;  # Default to residential
        proxy_timeout 60s;
        proxy_responses 1;
        proxy_next_upstream on;
        proxy_next_upstream_timeout 60s;
        proxy_next_upstream_tries 3;
        
        limit_conn proxy_conn 100;
        
        access_log /var/log/nginx/alpha_proxy.log proxy_stream;
        error_log /var/log/nginx/alpha_proxy_error.log;
    }

    # Beta region server (port 7777) - for future expansion
    server {
        listen 7777;
        proxy_pass oceanproxy_alpha_residential;  # Fallback until beta is implemented
        proxy_timeout 60s;
        proxy_responses 1;
        
        limit_conn proxy_conn 100;
        
        access_log /var/log/nginx/beta_proxy.log proxy_stream;
        error_log /var/log/nginx/beta_proxy_error.log;
    }

    # Include additional stream configurations created by OceanProxy
    include /etc/nginx/conf.d/*.stream;
}